package com.shentu.gamebox.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_DATA".
*/
public class GameDataDao extends AbstractDao<GameData, Long> {

    public static final String TABLENAME = "GAME_DATA";

    /**
     * Properties of entity GameData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UUID = new Property(1, String.class, "UUID", false, "UUID");
        public final static Property GameId = new Property(2, String.class, "gameId", false, "GAME_ID");
        public final static Property DownloadCount = new Property(3, String.class, "downloadCount", false, "DOWNLOAD_COUNT");
        public final static Property CurrentTiem = new Property(4, String.class, "currentTiem", false, "CURRENT_TIEM");
        public final static Property InstallTime = new Property(5, String.class, "InstallTime", false, "INSTALL_TIME");
        public final static Property Agent_code = new Property(6, String.class, "agent_code", false, "AGENT_CODE");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }


    public GameDataDao(DaoConfig config) {
        super(config);
    }
    
    public GameDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"UUID\" TEXT," + // 1: UUID
                "\"GAME_ID\" TEXT," + // 2: gameId
                "\"DOWNLOAD_COUNT\" TEXT," + // 3: downloadCount
                "\"CURRENT_TIEM\" TEXT," + // 4: currentTiem
                "\"INSTALL_TIME\" TEXT," + // 5: InstallTime
                "\"AGENT_CODE\" TEXT," + // 6: agent_code
                "\"TYPE\" TEXT);"); // 7: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GAME_DATA_UUID_DESC_AGENT_CODE_DESC_GAME_ID_DESC ON \"GAME_DATA\"" +
                " (\"UUID\" DESC,\"AGENT_CODE\" DESC,\"GAME_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(3, gameId);
        }
 
        String downloadCount = entity.getDownloadCount();
        if (downloadCount != null) {
            stmt.bindString(4, downloadCount);
        }
 
        String currentTiem = entity.getCurrentTiem();
        if (currentTiem != null) {
            stmt.bindString(5, currentTiem);
        }
 
        String InstallTime = entity.getInstallTime();
        if (InstallTime != null) {
            stmt.bindString(6, InstallTime);
        }
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(7, agent_code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(3, gameId);
        }
 
        String downloadCount = entity.getDownloadCount();
        if (downloadCount != null) {
            stmt.bindString(4, downloadCount);
        }
 
        String currentTiem = entity.getCurrentTiem();
        if (currentTiem != null) {
            stmt.bindString(5, currentTiem);
        }
 
        String InstallTime = entity.getInstallTime();
        if (InstallTime != null) {
            stmt.bindString(6, InstallTime);
        }
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(7, agent_code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GameData readEntity(Cursor cursor, int offset) {
        GameData entity = new GameData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gameId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // downloadCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // currentTiem
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // InstallTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // agent_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGameId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownloadCount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentTiem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInstallTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAgent_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
