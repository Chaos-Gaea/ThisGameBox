package com.shentu.gamebox.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX_LAUNCH".
*/
public class boxLaunchDao extends AbstractDao<boxLaunch, Long> {

    public static final String TABLENAME = "BOX_LAUNCH";

    /**
     * Properties of entity boxLaunch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Agent_code = new Property(1, String.class, "agent_code", false, "AGENT_CODE");
        public final static Property Imei = new Property(2, String.class, "imei", false, "IMEI");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property Date_str = new Property(4, String.class, "date_str", false, "DATE_STR");
        public final static Property Date_int = new Property(5, int.class, "date_int", false, "DATE_INT");
    }


    public boxLaunchDao(DaoConfig config) {
        super(config);
    }
    
    public boxLaunchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX_LAUNCH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"AGENT_CODE\" TEXT," + // 1: agent_code
                "\"IMEI\" TEXT," + // 2: imei
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"DATE_STR\" TEXT," + // 4: date_str
                "\"DATE_INT\" INTEGER NOT NULL );"); // 5: date_int
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX_LAUNCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, boxLaunch entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getCount());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(5, date_str);
        }
        stmt.bindLong(6, entity.getDate_int());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, boxLaunch entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getCount());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(5, date_str);
        }
        stmt.bindLong(6, entity.getDate_int());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public boxLaunch readEntity(Cursor cursor, int offset) {
        boxLaunch entity = new boxLaunch( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agent_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imei
            cursor.getInt(offset + 3), // count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date_str
            cursor.getInt(offset + 5) // date_int
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, boxLaunch entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAgent_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setDate_str(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate_int(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(boxLaunch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(boxLaunch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(boxLaunch entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
