package com.shentu.gamebox.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX_GAME_DATA".
*/
public class boxGameDataDao extends AbstractDao<boxGameData, Long> {

    public static final String TABLENAME = "BOX_GAME_DATA";

    /**
     * Properties of entity boxGameData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Agent_code = new Property(1, String.class, "agent_code", false, "AGENT_CODE");
        public final static Property Game_id = new Property(2, int.class, "game_id", false, "GAME_ID");
        public final static Property Game_type = new Property(3, int.class, "game_type", false, "GAME_TYPE");
        public final static Property Click = new Property(4, int.class, "click", false, "CLICK");
        public final static Property Download = new Property(5, int.class, "download", false, "DOWNLOAD");
        public final static Property Date_str = new Property(6, String.class, "date_str", false, "DATE_STR");
        public final static Property Date_int = new Property(7, int.class, "date_int", false, "DATE_INT");
    }


    public boxGameDataDao(DaoConfig config) {
        super(config);
    }
    
    public boxGameDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX_GAME_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"AGENT_CODE\" TEXT," + // 1: agent_code
                "\"GAME_ID\" INTEGER NOT NULL ," + // 2: game_id
                "\"GAME_TYPE\" INTEGER NOT NULL ," + // 3: game_type
                "\"CLICK\" INTEGER NOT NULL ," + // 4: click
                "\"DOWNLOAD\" INTEGER NOT NULL ," + // 5: download
                "\"DATE_STR\" TEXT," + // 6: date_str
                "\"DATE_INT\" INTEGER NOT NULL );"); // 7: date_int
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOX_GAME_DATA_GAME_ID_DESC_DATE_INT_DESC ON \"BOX_GAME_DATA\"" +
                " (\"GAME_ID\" DESC,\"DATE_INT\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX_GAME_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, boxGameData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
        stmt.bindLong(3, entity.getGame_id());
        stmt.bindLong(4, entity.getGame_type());
        stmt.bindLong(5, entity.getClick());
        stmt.bindLong(6, entity.getDownload());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(7, date_str);
        }
        stmt.bindLong(8, entity.getDate_int());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, boxGameData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
        stmt.bindLong(3, entity.getGame_id());
        stmt.bindLong(4, entity.getGame_type());
        stmt.bindLong(5, entity.getClick());
        stmt.bindLong(6, entity.getDownload());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(7, date_str);
        }
        stmt.bindLong(8, entity.getDate_int());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public boxGameData readEntity(Cursor cursor, int offset) {
        boxGameData entity = new boxGameData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agent_code
            cursor.getInt(offset + 2), // game_id
            cursor.getInt(offset + 3), // game_type
            cursor.getInt(offset + 4), // click
            cursor.getInt(offset + 5), // download
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date_str
            cursor.getInt(offset + 7) // date_int
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, boxGameData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAgent_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGame_id(cursor.getInt(offset + 2));
        entity.setGame_type(cursor.getInt(offset + 3));
        entity.setClick(cursor.getInt(offset + 4));
        entity.setDownload(cursor.getInt(offset + 5));
        entity.setDate_str(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate_int(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(boxGameData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(boxGameData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(boxGameData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
