package com.shentu.gamebox.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX_DATA".
*/
public class boxDataDao extends AbstractDao<boxData, Long> {

    public static final String TABLENAME = "BOX_DATA";

    /**
     * Properties of entity boxData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Agent_code = new Property(1, String.class, "agent_code", false, "AGENT_CODE");
        public final static Property Agent_id = new Property(2, int.class, "agent_id", false, "AGENT_ID");
        public final static Property Sub_agent_id = new Property(3, int.class, "sub_agent_id", false, "SUB_AGENT_ID");
        public final static Property Shangwu_id = new Property(4, int.class, "shangwu_id", false, "SHANGWU_ID");
        public final static Property New_device = new Property(5, int.class, "new_device", false, "NEW_DEVICE");
        public final static Property Launch = new Property(6, int.class, "launch", false, "LAUNCH");
        public final static Property Zq_click = new Property(7, int.class, "zq_click", false, "ZQ_CLICK");
        public final static Property Zq_download = new Property(8, int.class, "zq_download", false, "ZQ_DOWNLOAD");
        public final static Property Tj_click = new Property(9, int.class, "tj_click", false, "TJ_CLICK");
        public final static Property Tj_download = new Property(10, int.class, "tj_download", false, "TJ_DOWNLOAD");
        public final static Property Date_str = new Property(11, String.class, "date_str", false, "DATE_STR");
        public final static Property Date_int = new Property(12, int.class, "date_int", false, "DATE_INT");
    }


    public boxDataDao(DaoConfig config) {
        super(config);
    }
    
    public boxDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"AGENT_CODE\" TEXT," + // 1: agent_code
                "\"AGENT_ID\" INTEGER NOT NULL ," + // 2: agent_id
                "\"SUB_AGENT_ID\" INTEGER NOT NULL ," + // 3: sub_agent_id
                "\"SHANGWU_ID\" INTEGER NOT NULL ," + // 4: shangwu_id
                "\"NEW_DEVICE\" INTEGER NOT NULL ," + // 5: new_device
                "\"LAUNCH\" INTEGER NOT NULL ," + // 6: launch
                "\"ZQ_CLICK\" INTEGER NOT NULL ," + // 7: zq_click
                "\"ZQ_DOWNLOAD\" INTEGER NOT NULL ," + // 8: zq_download
                "\"TJ_CLICK\" INTEGER NOT NULL ," + // 9: tj_click
                "\"TJ_DOWNLOAD\" INTEGER NOT NULL ," + // 10: tj_download
                "\"DATE_STR\" TEXT," + // 11: date_str
                "\"DATE_INT\" INTEGER NOT NULL );"); // 12: date_int
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOX_DATA_AGENT_CODE_DESC_DATE_INT_DESC ON \"BOX_DATA\"" +
                " (\"AGENT_CODE\" DESC,\"DATE_INT\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, boxData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
        stmt.bindLong(3, entity.getAgent_id());
        stmt.bindLong(4, entity.getSub_agent_id());
        stmt.bindLong(5, entity.getShangwu_id());
        stmt.bindLong(6, entity.getNew_device());
        stmt.bindLong(7, entity.getLaunch());
        stmt.bindLong(8, entity.getZq_click());
        stmt.bindLong(9, entity.getZq_download());
        stmt.bindLong(10, entity.getTj_click());
        stmt.bindLong(11, entity.getTj_download());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(12, date_str);
        }
        stmt.bindLong(13, entity.getDate_int());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, boxData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String agent_code = entity.getAgent_code();
        if (agent_code != null) {
            stmt.bindString(2, agent_code);
        }
        stmt.bindLong(3, entity.getAgent_id());
        stmt.bindLong(4, entity.getSub_agent_id());
        stmt.bindLong(5, entity.getShangwu_id());
        stmt.bindLong(6, entity.getNew_device());
        stmt.bindLong(7, entity.getLaunch());
        stmt.bindLong(8, entity.getZq_click());
        stmt.bindLong(9, entity.getZq_download());
        stmt.bindLong(10, entity.getTj_click());
        stmt.bindLong(11, entity.getTj_download());
 
        String date_str = entity.getDate_str();
        if (date_str != null) {
            stmt.bindString(12, date_str);
        }
        stmt.bindLong(13, entity.getDate_int());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public boxData readEntity(Cursor cursor, int offset) {
        boxData entity = new boxData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agent_code
            cursor.getInt(offset + 2), // agent_id
            cursor.getInt(offset + 3), // sub_agent_id
            cursor.getInt(offset + 4), // shangwu_id
            cursor.getInt(offset + 5), // new_device
            cursor.getInt(offset + 6), // launch
            cursor.getInt(offset + 7), // zq_click
            cursor.getInt(offset + 8), // zq_download
            cursor.getInt(offset + 9), // tj_click
            cursor.getInt(offset + 10), // tj_download
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // date_str
            cursor.getInt(offset + 12) // date_int
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, boxData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAgent_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgent_id(cursor.getInt(offset + 2));
        entity.setSub_agent_id(cursor.getInt(offset + 3));
        entity.setShangwu_id(cursor.getInt(offset + 4));
        entity.setNew_device(cursor.getInt(offset + 5));
        entity.setLaunch(cursor.getInt(offset + 6));
        entity.setZq_click(cursor.getInt(offset + 7));
        entity.setZq_download(cursor.getInt(offset + 8));
        entity.setTj_click(cursor.getInt(offset + 9));
        entity.setTj_download(cursor.getInt(offset + 10));
        entity.setDate_str(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDate_int(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(boxData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(boxData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(boxData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
